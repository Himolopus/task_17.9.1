# Программа для поиска элемента в отсортированном списке, удовлетворяющего условию:
# элемент меньше введенного пользователем числа, а следующий за ним больше или равен этому числу

def has_solution(arr, num):    # функция для проверки существования решения для заданного списка и числа
    return not (num <= arr[0] or num > arr[-1])    # учтен вариант, при котором список состоит из одного элемента


def search_element(arr, num, left, right):  # функция для поиска элемента, удовлетворяющего условию задачи
    cur = (left + right) // 2   # текущий индекс (является серединой рассматриваемой области)
    # функция рекурсивная, но мы не добавляем в терминальное условие т.к. она будет вызываться после проверки
    # того что у задачи есть решение, т.е. ответ будет найден до того как left станет больше чем right

    # в списке могут присутствовать значения равные num (введенному числу)
    # при нахождении элемента с таким значением нет смысла делать дальнейшие рекурсивные вызовы
    if arr[cur] == num:
        cur -= 1    # уменьшаем индекс, что бы он указывал на предыдущий элемент
        while arr[cur] == num:  # если текущий элемент так же равен num (введенному пользователем числу)
            cur -= 1            # выполняем цикл пока не найдем отличное значение, это будет искомый элемент
        return cur  # индекс искомого элемента
    if arr[cur] < num <= arr[cur + 1]:  # если элемент с текущим индексом удовлетворяет условию задачи
        return cur  # возвращаем индекс
    # если элемент не обнаружен выполняем рекурсионный вызов "сужая" рамки рассматриваемых индексов
    elif num < arr[cur]:
        return search_element(arr, num, left, cur - 1)
    else:
        return search_element(arr, num, cur + 1, right)


user_input_1 = input("Введите числа через пробел: ")
# проверяем ввод пользователя на наличие недопустимых символов с помощью методов строк
# не беспокоимся о множественных пробелах, т.к. их в дальнейшем прекрасно обработает метод split по умолчанию
while not user_input_1.replace(" ", "").isdigit():
    user_input_1 = input("Неверный ввод, попробуйте снова.\nВведите числа через пробел: ")

# применим метод strip, что бы не "браковать" ввод пользователя из за случайного пробела или табуляции
user_input_2 = input("Введите любое число: ").strip()
while not user_input_2.isdigit():
    user_input_2 = input("Неверный ввод, попробуйте снова.\nВведите любое число: ").strip()

# создаем список на основе первого ввода, преобразуя элементы в целочисленный тип данных с помощью функции map
array = list(map(int, user_input_1.split()))
# отсортируем список по возрастанию с помощью метода sort (хорошо подходит для нашей задачи) с аргументами по умолчанию
array.sort()
print(array)    # вывод отсортированного списка (для наглядности)
number = int(user_input_2)  # число, необходимое для проверки условий


if has_solution(array, number):  # при наличии решения запускаем функцию
    answer = search_element(array, number, 0, len(array) - 1)
    print(f"Индекс искомого элемента - {answer}")
else:
    print("Элемент, удовлетворяющий условию, не существует :(")
